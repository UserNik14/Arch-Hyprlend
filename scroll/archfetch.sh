#!/bin/bash
#
#
#



## COLORS

if [ -x "$(command -v tput)" ]; then
	bold="$(tput bold 2> /dev/null)"
	black="$(tput setaf 0 2> /dev/null)"
	red="$(tput setaf 1 2> /dev/null)"
	green="$(tput setaf 2 2> /dev/null)"
	yellow="$(tput setaf 3 2> /dev/null)"
	blue="$(tput setaf 4 2> /dev/null)"
	magenta="$(tput setaf 5 2> /dev/null)"
	cyan="$(tput setaf 6 2> /dev/null)"
	white="$(tput setaf 7 2> /dev/null)"
	reset="$(tput sgr0 2> /dev/null)"
fi

label="${reset}${bold}${blue}"



## RAM

# il primo argomento dello script pu√≤ essere MiB oppure GiB
UNIT="${1:-MiB}"  # se non viene passato nulla, usa MiB di default

read RAM_USED RAM_TOTAL <<< $(free -m | awk '/^Mem:/ {print $3, $2}')

# calcola la percentuale
PERC=$(( RAM_USED * 100 / RAM_TOTAL ))

# converte da MiB a GiB
if [[ "$UNIT" == "GiB" ]]; then
    RAM_USED=$(printf '%.2f\n' $((10**2*$RAM_USED/1024))e-2)
    RAM_TOTAL=$(printf '%.2f\n' $((10**2*$RAM_TOTAL/1024))e-2)
fi



## SYSTEM INFO

SYSINFO=(
"${reset}${bold}        ___           __"
"${reset}${bold}       / _ | ________/ /"
"${reset}${bold}      / __ |/ __/ __/ _ \\"
"${reset}${bold}     /_/ |_/_/  \__/_//_/"
"${reset}${bold}    ÔëõÔëõ ÔëõÔëõ ÔëõÔëõ ÔëõÔëõ ÔëõÔëõ ÔëõÔëõ ÔëõÔëõ ÔëõÔëõ"
" ${label}Kernel:${reset}    $(uname -sr)"
"  ${label}Ram:${reset}       $(printf "%s/%s %s (%d%%)" "$RAM_USED" "$RAM_TOTAL" "$UNIT" "$PERC")"
"   ${label}Uptime:${reset}    $(uptime -p | sed 's/up //')"
"    ${label}Packages:${reset}  $(pacman -Q | wc -l)"
""
""
""
)



## PRINT OUTPUT

#read -r rows cols < <(stty size)
#echo "Numero di righe: $rows"
#echo "Numero di colonne: $cols"

if [ $(tput lines) -lt 13 ]; then
        for info in "${SYSINFO[@]:0:4}"; do
          echo "  $info"
        done
        exit
fi

if [ $(tput lines) -lt 18 ]; then
        for info in "${SYSINFO[@]:0:8}"; do
          echo "  $info"
        done
        exit
fi

#if [ -z "$DISPLAY" ] && [ -z "$WAYLAND_DISPLAY" ] || [ $(tput cols) -lt 68 ]; then
if [ "$XDG_SESSION_TYPE" = "tty" ] || [ $(tput cols) -lt 68 ]; then
	for info in "${SYSINFO[@]}"; do
	  echo "  $info"
	done
	exit
fi


IMAGE="[?25l[0m              [38;2;23;147;209mÓÇ∫[38;2;36;153;211mÓÇ∏[39m             [0m
             [38;2;22;133;188mÓÇ∫[48;2;23;146;209m[38;2;25;147;209mü≠ë[48;2;25;147;209m[38;2;47;158;213m‚ñù[49m[38;2;58;156;205m‚ññ[39m            [0m
            [38;2;30;136;190m‚ñó[48;2;24;126;177m[38;2;33;151;211mÓÇ∂[48;2;28;149;210mü≠ç[48;2;27;149;209m[38;2;32;151;210mü≠ç[48;2;48;155;209m[38;2;48;119;153m‚ñï[49m[38;2;63;152;197m‚ññ[39m           [0m
           [38;2;43;154;210mü≠ã[48;2;27;114;158m[38;2;43;156;213mÓÇ∂[48;2;39;154;212m[38;2;44;157;213mü≠ç[48;2;38;154;212m[38;2;42;156;212mü≠ç[48;2;36;153;211m[38;2;41;155;212mü≠ç[48;2;44;157;213m[38;2;37;153;211m‚ñâ[48;2;54;130;169m[38;2;60;164;216mÓÇ¥[49m[38;2;71;169;218mü¨æ[39m          [0m
          [38;2;57;162;215mü≠á[38;2;60;158;207m‚ñù[48;2;53;160;214m[38;2;55;60;62mü¨æ[48;2;48;159;214m[38;2;53;161;214mü≠ç[48;2;47;158;213m[38;2;52;160;214mü≠ç[48;2;46;157;213m[38;2;50;159;214m‚ñÑ[48;2;43;156;213m[38;2;48;158;214m‚ñÖ[48;2;46;157;213m[38;2;56;162;215m‚ñï[48;2;37;93;120m[38;2;70;169;218m‚ñô[49m[38;2;69;168;217mü¨æ[39m         [0m
         [38;2;74;169;216mü≠â[48;2;60;115;142m[38;2;65;166;217m‚ñü[48;2;66;160;208m[38;2;63;165;217m‚ñá[49m[38;2;58;146;190m‚ñá[48;2;69;158;203m[38;2;53;106;132m [48;2;62;165;216m[38;2;76;147;182m [48;2;55;162;215m[38;2;59;163;216mü≠í[48;2;53;161;214m[38;2;57;163;215mü≠å[48;2;51;160;214m[38;2;56;162;215mü≠å[48;2;54;161;215m[38;2;68;168;218m‚ñï[48;2;46;108;140m[38;2;76;171;219m‚ñô[49m[38;2;75;169;217mü¨æ[39m        [0m
        [38;2;82;174;220mü≠â[48;2;64;114;137m[38;2;76;171;219m‚ñü[48;2;72;169;218m[38;2;76;172;219m‚ñÑ[48;2;70;169;218m[38;2;75;171;219mü≠ç[48;2;68;168;218m[38;2;73;170;218mü≠ç[48;2;67;167;217m[38;2;72;169;218mü≠ç[48;2;66;166;217m[38;2;70;169;218m‚ñÑ[48;2;64;166;217m[38;2;68;168;218mÓ∏Ñ[48;2;63;165;216m[38;2;67;167;217mü≠ç[48;2;61;164;216m[38;2;66;166;217mü≠ç[48;2;59;164;216m[38;2;64;166;217mü≠ç[48;2;58;163;216m[38;2;62;165;216m‚ñü[48;2;42;95;121m[38;2;78;172;220m‚ñô[49m[38;2;74;167;212mü¨æ[39m       [0m
       [38;2;89;178;222mü≠â[48;2;74;133;163m[38;2;86;176;221mÓÇ∂[48;2;84;175;221m[38;2;73;170;219mü≠á[48;2;80;173;220m[38;2;28;149;210mü≠ä[48;2;79;173;220mü≠Ç[48;2;69;168;218m[38;2;26;148;209m‚àé[48;2;66;167;217m[38;2;23;147;209m‚ñÜ[48;2;24;147;209m[38;2;68;168;218müÆÄ[48;2;57;162;215m[38;2;23;147;209m‚ñá[48;2;48;159;213m‚ñá[48;2;52;160;214m‚ñá[48;2;23;147;209m[38;2;63;165;217müÆÄ[48;2;55;161;215m[38;2;23;147;209m‚ñÜ[48;2;65;166;217m[38;2;25;148;209m‚ñÜ[48;2;42;116;151m[38;2;51;160;214mÓÇ¥[49m[38;2;56;162;215mü¨æ[39m      [0m
      [38;2;40;153;209mü≠â[48;2;72;133;163m[38;2;58;163;216mÓÇ∂[48;2;81;174;220m[38;2;26;148;209m‚ñÜ[48;2;52;160;214m[38;2;23;147;209m‚ñá[48;2;22;146;209m[38;2;22;146;209mùïÅùïÅùïÅ[48;2;22;146;208m[38;2;9;59;84mü≠á[49m[38;2;22;146;209müÆÑ[38;2;21;134;191müÆÖ[48;2;22;146;209m[38;2;12;99;143mü¨º[38;2;22;146;209mùïÅùïÅùïÅùïÅùïÅ[48;2;27;100;136m[38;2;26;148;209mÓÇ¥[49m[38;2;24;147;209mü¨æ[39m     [0m
     [38;2;22;146;208mü≠ã[48;2;17;116;166m[38;2;22;146;209mÓÇ∂[48;2;22;146;209mùïÅ[38;2;23;146;208m‚ï¥[38;2;22;146;209mùïÅ[38;2;22;147;209mÓ∏à[38;2;22;146;209mùïÅ[49m[38;2;18;121;172m‚ñõ[39m   [38;2;10;64;91m‚ñï[38;2;20;129;183m‚ñú[48;2;23;147;209m[38;2;22;146;209müÆÜ[48;2;22;146;209mùïÅùïÅùïÅùïÅ[48;2;18;117;166mÓÇ¥[49m[38;2;18;123;175m‚ññ[39m    [0m
    [38;2;22;146;209mü≠ã[48;2;18;117;166mÓÇ∂[48;2;22;146;209mùïÅ‚∏àùïÅùïÅùïÅ[48;2;22;141;201m[38;2;7;45;64mü≠ã[49m[39m      [48;2;22;143;203m[38;2;8;56;79mü≠¨[48;2;22;146;209m[38;2;22;146;209mùïÅùïÅ[38;2;22;147;209mü≠á[48;2;23;147;209m[38;2;22;146;208mÛ∞Ñô[48;2;22;146;209m[38;2;22;147;208mü¨º[48;2;18;117;166m[38;2;22;146;209mÓÇ¥[49m[38;2;19;130;185m‚ññ[39m   [0m
   [38;2;22;143;204m‚ñó[48;2;19;127;180m[38;2;22;146;208m‚ñá[48;2;22;146;209m[38;2;22;146;209mùïÅùïÅùïÅ[38;2;23;145;208m‚¢Ä[38;2;22;146;208mÀº[38;2;22;146;209mùïÅ[49m[38;2;22;146;208m‚ñã[39m      [38;2;22;146;208müÆâ[48;2;22;146;209m[38;2;22;146;209mùïÅùïÅùïÅ[48;2;22;147;209m‚å†[48;2;15;104;149m‚ñÜ[48;2;20;129;184m[38;2;5;37;53mü≠£[49m[38;2;16;103;147m‚ñõ[38;2;7;51;73m [39m  [0m
  [38;2;21;140;200mÓÇ∫[48;2;20;133;190m[38;2;22;146;209m‚ñá[48;2;22;146;209mùïÅ[38;2;23;147;210m‚Ä∏[38;2;22;146;209mùïÅü≠á[48;2;22;146;208m[38;2;8;59;85mü≠à[49m[38;2;22;144;205müÆÑ[38;2;21;140;200m‚ñÄ[38;2;18;120;171müÆÉ[39m      [38;2;17;113;162müÆÉ[38;2;22;143;204m‚ñÄ[38;2;22;145;207müÆÑ[48;2;22;146;209m[38;2;12;82;115mü¨Ω[38;2;22;146;209mùïÅùïÅùïÅ[48;2;22;146;208m[38;2;22;146;208müÆÜ[49m[38;2;20;131;186m‚ñá[38;2;22;143;204m‚ññ[39m [0m
 [38;2;22;146;208mÓÇ∫[48;2;22;146;208m[38;2;22;146;209m‚ñá[38;2;9;97;141mü≠á[49m[38;2;22;144;205müÆÑ[38;2;22;146;208müÆÉ[38;2;21;135;192müÆÇ[38;2;16;108;154m [39m              [38;2;18;118;169m [38;2;22;141;200müÆÇ[38;2;22;146;208müÆÉ[38;2;22;145;207müÆÑ[48;2;22;146;209m[38;2;15;140;203mü¨º[48;2;23;147;209m[38;2;22;146;208mùÖ•[49mÓÇ∏[39m[0m
[38;2;21;135;192müôº[38;2;22;146;209müÆÉ[38;2;20;129;183müÆÇ[39m     [39m                   [38;2;21;134;191müÆÇ[38;2;21;136;193m‚ñÄ[38;2;19;123;176mÓÇ∏[39m[0m[?25h"



# conta le righe dell'immagine
IMAGE_HEIGHT=$(echo "$IMAGE" | wc -l)
SYSINFO_COUNT=${#SYSINFO[@]}

# calcola l'offset per centrare le specifiche
OFFSET=$(( (IMAGE_HEIGHT - SYSINFO_COUNT) / 2 ))

# inizializza array FETCH
FETCH=()

# accumula in FETCH
i=0
while IFS= read -r line; do
  if [ $i -ge $OFFSET ] && [ $i -lt $((OFFSET + SYSINFO_COUNT)) ]; then
    FETCH+=("$line${SYSINFO[$((i - OFFSET))]}")
  else
    FETCH+=("$line")
  fi
  i=$((i + 1))
done <<< "$IMAGE"



# nascondi cursore
printf '\e[?25l'

# ritardo
delay=0.003

cursor=$'\e[0m‚ñë‚ñë‚ñí‚ñì'

# tokenizza una riga in escape CSI + caratteri singoli
tokenize() {
  local s=$1; local -n T=$2
  T=()
  while [[ -n $s ]]; do
    if [[ $s =~ ^(\[[0-9;]*m)(.*) ]]; then
      T+=( "${BASH_REMATCH[1]}" )
      s=${BASH_REMATCH[2]}
    else
      T+=( "${s:0:1}" )
      s=${s:1}
    fi
  done
}

print_with_cursor() {
  local line=$1
  local -a tokens
  local prefix=""  # qui accumulo in ordine escape+testo
  tokenize "$line" tokens

  for tok in "${tokens[@]}"; do
    prefix+="$tok"
    # se √® carattere visibile (non inizio con ESC[), faccio il frame
    if [[ ! $tok =~ ^\[ ]]; then
      printf '\r%s%s\e[K' "$prefix" "$cursor"
      read -t "$delay"
    fi
  done

  # frame finale (tutta la riga senza cursor)
  printf '\r%s\e[K\n' "$prefix"
}

# stampa a schermo
for L in "${FETCH[@]}"; do
  print_with_cursor "$L"
done

# ripristina cursore
printf '\e[?25h'
